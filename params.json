{"name":"imreg","body":"### Welcome \r\n\r\n\"imreg\" is the python implementation of a collection of image alignment (registration) methods. The package is intended to be simple to use and leverages off both scipy, numpy and custom build c++ extensions.\r\n\r\n### Installation\r\n\r\nThe package is available from pypi and installable like so:\r\n\r\n```\r\npip install imreg\r\n```\r\n\r\n### Example use:\r\n\r\nLinear registration of a rotated image, in this case the famous \"lenna\" image. (http://en.wikipedia.org/wiki/Lenna)\r\n\r\n```\r\nimport scipy.ndimage as nd\r\nimport scipy.misc as misc\r\n\r\nfrom imreg.models import model\r\nfrom imreg.metrics import metric\r\nfrom imreg.samplers import sampler\r\nfrom imreg import register\r\n\r\nfrom imreg.visualize import plot\r\n\r\n# Form some test data (lena, lena rotated 20 degrees)\r\nimage = misc.lena()\r\ntemplate = nd.rotate(image, 20, reshape=False)\r\n\r\n# Form the affine registration instance.\r\naffine = register.Register(\r\n    model.Affine,\r\n    metric.Residual,\r\n    sampler.CubicConvolution\r\n    )\r\n\r\n# Coerce the image data into RegisterData.\r\nimage = register.RegisterData(image).downsample(2)\r\ntemplate = register.RegisterData(template).downsample(2)\r\n\r\n# Register.\r\nstep, search = affine.register(\r\n    image,\r\n    template,\r\n    verbose=True,\r\n    )\r\n```\r\n","tagline":"Linear and non-linear image registration methods, using scipy and numpy.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}